/*
 * Copyright (C) 2019 The Smash Ks Open Project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished
 * to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "org.jetbrains.kotlin.kapt"

android {
    compileSdkVersion dependencies.Versions.Android.compileSdk

    defaultConfig {
        minSdkVersion dependencies.Versions.Android.minSdk
        targetSdkVersion dependencies.Versions.Android.targetSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"

            buildConfigField 'String', "SeekSongUriDomain", getProps("seek_song_uri_domain")
            buildConfigField 'String', "SeekSongUriRequest", getProps("seek_song_uri_request")
            buildConfigField 'String', "SongUriDomain", getProps("song_uri_domain")
            buildConfigField 'String', "SongUriRequest", getProps("song_uri_request")
            buildConfigField 'String', "RankingUriDomain", getProps("ranking_uri_domain")
            buildConfigField 'String', "RankingUriRequest", getProps("ranking_uri_request")
        }
        debug {
            splits.abi.enable = false
            splits.density.enable = false
            aaptOptions.cruncherEnabled = false
            minifyEnabled = false
            testCoverageEnabled = true
            // Only use this flag on builds you don't proguard or upload to beta-by-crashlytics.
            ext.alwaysUpdateBuildId = false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"

            buildConfigField 'String', "SeekSongUriDomain", getProps("seek_song_uri_domain")
            buildConfigField 'String', "SeekSongUriRequest", getProps("seek_song_uri_request")
            buildConfigField 'String', "SongUriDomain", getProps("song_uri_domain")
            buildConfigField 'String', "SongUriRequest", getProps("song_uri_request")
            buildConfigField 'String', "RankingUriDomain", getProps("ranking_uri_domain")
            buildConfigField 'String', "RankingUriRequest", getProps("ranking_uri_request")
            buildConfigField 'String', "query1", getProps("query_1")
            buildConfigField 'String', "query2", getProps("query_2")
            buildConfigField 'String', "param1", getProps("param_1")
            buildConfigField 'String', "param2", getProps("param_2")
        }
    }
    testOptions { unitTests.returnDefaultValues = true }
    lintOptions { abortOnError = false }
}

kapt {
    useBuildCache = true
    correctErrorTypes = true
    mapDiagnosticLocations = true
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation([project(":domain"), project(":ext")])

    implementation(dependencies.Dependencies.commonAndroidx.values())
    implementation(dependencies.Dependencies.kotlin.values())
    implementation(dependencies.Deps.Global.shaver) {
        exclude(group: "io.reactivex.rxjava2")
    }
    implementation(dependencies.Deps.Global.gson)

    kapt(dependencies.Deps.Data.roomAnnotation)
    implementation(dependencies.Deps.Data.room)
    implementation(dependencies.Deps.Data.mmkv)
    implementation(dependencies.Deps.Data.jsoup)

    //region Internet & ImageData loading
    implementation(dependencies.Deps.Data.retrofit2)
    implementation(dependencies.Deps.Data.retrofit2AdapterCoroutine) {
        exclude(group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-core")
    }
    //endregion

    implementation(dependencies.Deps.Data.firebaseDB)
}

// Get a variable from local.properties.
def getProps(String propName) {
    def propsFile = rootProject.file('local.properties')

    if (!propsFile.exists()) return "\"No_Exist\""

    def props = new Properties()
    props.load(new FileInputStream(propsFile))

    return null != props[propName] ? props[propName] : "\"There_is_no_parameter\""
}
